{"version":3,"sources":["components/PageTitle/index.tsx","components/FormInput/index.tsx","components/VerticalForm/index.tsx","pages/forms/Wizard.tsx"],"names":["PageTitle","props","className","title","listProps","Item","href","breadCrumbItems","map","item","index","active","label","path","TextualInput","type","name","placeholder","register","errors","comp","rows","refCallback","otherProps","Control","as","id","ref","r","isInvalid","Feedback","CheckInput","Check","SelectInput","Select","FormInputGroup","startIcon","textClassName","Text","FormInput","control","labelClassName","containerClass","action","Group","Label","VerticalForm","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","formState","noValidate","Array","isArray","child","React","createElement","key","BasicWizard","Body","render","next","Row","htmlFor","column","md","defaultValue","variant","disabled","onClick","previous","sm","Input","WizardWithProgressbar","step","steps","Fragment","animated","striped","now","indexOf","length","WizardWithFormValidation","validationSchema","yupResolver","yup","shape","email","required","password","checkbox","oneOf","validationSchema2","firstname","lastname","event","values","FormWizard","xl","lg"],"mappings":"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","file":"static/js/61.51e4df94.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\n//TYPES\n\nimport { BreadcrumbItems, PageTitleProps } from \"@components/PageTitle/interfaces/index.interfaces\";\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps) => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <h4 className=\"page-title\">{props.title}</h4>\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Shreyu</Breadcrumb.Item>\n                            {(props.breadCrumbItems || []).map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","import { Form, InputGroup } from \"react-bootstrap\";\nimport { FormInputProps } from \"@components/FormInput/interfaces/index.interfaces\";\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Control\n                type={type}\n                placeholder={placeholder}\n                name={name}\n                as={comp}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                rows={rows}\n                {...otherProps}></Form.Control>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// extend textual form-controls with add-ons\nconst FormInputGroup = ({\n    startIcon,\n    type,\n    name,\n    placeholder,\n    comp,\n    register,\n    errors,\n    rows,\n    className,\n    textClassName,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <InputGroup>\n            <InputGroup.Text className={textClassName}>{startIcon}</InputGroup.Text>\n            {type === 'select' ? (\n                <SelectInput\n                    type={type}\n                    name={name}\n                    placeholder={placeholder}\n                    refCallback={refCallback}\n                    comp={comp}\n                    errors={errors}\n                    register={register}\n                    className={className}\n                    rows={rows}\n                    {...otherProps}\n                />\n            ) : (\n                <TextualInput\n                    type={type}\n                    name={name}\n                    placeholder={placeholder}\n                    refCallback={refCallback}\n                    comp={comp}\n                    errors={errors}\n                    register={register}\n                    className={className}\n                    rows={rows}\n                    {...otherProps}\n                />\n            )}\n        </InputGroup>\n    );\n};\n\nconst FormInput = ({\n    startIcon,\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    textClassName,\n    refCallback,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'checkbox' || type === 'radio' ? (\n                        <Form.Group className={containerClass}>\n                            <CheckInput\n                                type={type}\n                                label={label}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                rows={rows}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n                            {startIcon ? (\n                                <FormInputGroup\n                                    type={type}\n                                    startIcon={startIcon}\n                                    name={name}\n                                    comp={comp}\n                                    textClassName={textClassName}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            ) : (\n                                <SelectInput\n                                    type={type}\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    comp={comp}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            )}\n                        </Form.Group>\n                    ) : (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n                            {startIcon ? (\n                                <FormInputGroup\n                                    type={type}\n                                    startIcon={startIcon}\n                                    name={name}\n                                    comp={comp}\n                                    textClassName={textClassName}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            ) : (\n                                <TextualInput\n                                    type={type}\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    comp={comp}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            )}\n                        </Form.Group>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { VerticalFromProps } from '@components/VerticalForm/interfaces/index.interfaces';\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                    return child.props && child.props.name\n                        ? React.createElement(child.type, {\n                            ...{\n                                ...child.props,\n                                register,\n                                key: child.props.name,\n                                errors,\n                                control,\n                            },\n                        })\n                        : child;\n                })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import React from 'react';\nimport { Row, Col, Card, Form, Button, ProgressBar } from 'react-bootstrap';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// components\nimport PageTitle from '@components/PageTitle';\nimport FormInput from '@components/FormInput';\nimport VerticalForm from '@components/VerticalForm';\n\nconst BasicWizard = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mb-3\"> Basic Wizard</h4>\n                <Wizard>\n                    <Steps>\n                        <Step\n                            id=\"login\"\n                            render={({ next }) => (\n                                <Form>\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"exampleEmail\" column md={3}>\n                                            Email\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"email\"\n                                                name=\"exampleEmail\"\n                                                id=\"exampleEmail\"\n                                                placeholder=\"Enter email\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"examplePassword\" column md={3}>\n                                            Password\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"password\"\n                                                name=\"examplePassword\"\n                                                id=\"examplePassword\"\n                                                placeholder=\"password placeholder\"\n                                                defaultValue=\"12345\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"examplerePassword\" column md={3}>\n                                            Re-Password\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"password\"\n                                                name=\"exampleRepassword\"\n                                                id=\"examplerePassword\"\n                                                placeholder=\"password\"\n                                                defaultValue=\"12345\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <ul className=\"list-inline wizard mb-0\">\n                                        <li className=\"previous list-inline-item\">\n                                            <Button variant=\"secondary\" disabled>\n                                                Previous\n                                            </Button>\n                                        </li>\n                                        <li className=\"next list-inline-item float-end\">\n                                            <Button onClick={next} variant=\"secondary\">\n                                                Next\n                                            </Button>\n                                        </li>\n                                    </ul>\n                                </Form>\n                            )}\n                        />\n                        <Step\n                            id=\"gandalf\"\n                            render={({ next, previous }) => (\n                                <Form>\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"fname\" column md={3}>\n                                            First Name\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"text\"\n                                                name=\"fname\"\n                                                id=\"fname\"\n                                                placeholder=\"Enter first name\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"lname\" column md={3}>\n                                            Last Name\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"text\"\n                                                name=\"lname\"\n                                                id=\"lname\"\n                                                placeholder=\"enter last name\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"phone\" column md={3}>\n                                            Phone Number\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"text\"\n                                                name=\"phone\"\n                                                id=\"phone\"\n                                                placeholder=\"enter phone number\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <ul className=\"list-inline wizard mb-0\">\n                                        <li className=\"previous list-inline-item\">\n                                            <Button onClick={previous} variant=\"secondary\">\n                                                Previous\n                                            </Button>\n                                        </li>\n                                        <li className=\"next list-inline-item float-end\">\n                                            <Button onClick={next} variant=\"secondary\">\n                                                Next\n                                            </Button>\n                                        </li>\n                                    </ul>\n                                </Form>\n                            )}\n                        />\n                        <Step\n                            id=\"dumbledore\"\n                            render={({ previous }) => (\n                                <Row>\n                                    <Col sm={12}>\n                                        <div className=\"text-center\">\n                                            <h2 className=\"mt-0\">\n                                                <i className=\"mdi mdi-check-all\"></i>\n                                            </h2>\n                                            <h3 className=\"mt-0\">Thank you !</h3>\n\n                                            <p className=\"w-75 mb-2 mx-auto\">\n                                                Quisque nec turpis at urna dictum luctus. Suspendisse convallis\n                                                dignissim eros at volutpat. In egestas mattis dui. Aliquam mattis dictum\n                                                aliquet.\n                                            </p>\n\n                                            <div className=\"mb-3\">\n                                                <Form.Check type=\"checkbox\" id=\"check1\">\n                                                    <Form.Check.Input type=\"checkbox\" />{' '}\n                                                    <Form.Check.Label>\n                                                        I agree with the Terms and Conditions\n                                                    </Form.Check.Label>\n                                                </Form.Check>\n                                            </div>\n                                        </div>\n                                    </Col>\n\n                                    <Col sm={12}>\n                                        <ul className=\"list-inline wizard mb-0\">\n                                            <li className=\"previous list-inline-item\">\n                                                <Button onClick={previous} variant=\"secondary\">\n                                                    Previous\n                                                </Button>\n                                            </li>\n\n                                            <li className=\"next list-inline-item float-end\">\n                                                <Button variant=\"secondary\">Submit</Button>\n                                            </li>\n                                        </ul>\n                                    </Col>\n                                </Row>\n                            )}\n                        />\n                    </Steps>\n                </Wizard>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst WizardWithProgressbar = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mb-3\">Wizard with Progress bar</h4>\n\n                <Wizard\n                    render={({ step, steps }) => (\n                        <React.Fragment>\n                            <ProgressBar\n                                animated\n                                striped\n                                variant=\"success\"\n                                now={((steps.indexOf(step) + 1) / steps.length) * 100}\n                                className=\"mb-3 progress-sm\"\n                            />\n\n                            <Steps>\n                                <Step\n                                    id=\"login\"\n                                    render={({ next }) => (\n                                        <Form>\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"exampleEmail\" column md={3}>\n                                                    Email\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"email\"\n                                                        name=\"exampleEmail\"\n                                                        id=\"exampleEmail2\"\n                                                        placeholder=\"Enter email\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"examplePassword\" column md={3}>\n                                                    Password\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"password\"\n                                                        name=\"password\"\n                                                        id=\"examplePassword2\"\n                                                        placeholder=\"password placeholder\"\n                                                        defaultValue=\"12345\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"examplerePassword\" column md={3}>\n                                                    Re-Password\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"password\"\n                                                        name=\"repassword\"\n                                                        id=\"examplerePassword2\"\n                                                        placeholder=\"password\"\n                                                        defaultValue=\"12345\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <ul className=\"list-inline wizard mb-0\">\n                                                <li className=\"previous list-inline-item\">\n                                                    <Button variant=\"secondary\" disabled>\n                                                        Previous\n                                                    </Button>\n                                                </li>\n                                                <li className=\"next list-inline-item float-end\">\n                                                    <Button onClick={next} variant=\"secondary\">\n                                                        Next\n                                                    </Button>\n                                                </li>\n                                            </ul>\n                                        </Form>\n                                    )}\n                                />\n                                <Step\n                                    id=\"gandalf\"\n                                    render={({ next, previous }) => (\n                                        <Form>\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"fname\" column md={3}>\n                                                    First Name\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        name=\"fname\"\n                                                        id=\"fname\"\n                                                        placeholder=\"Enter first name\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"lname\" column md={3}>\n                                                    Last Name\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        name=\"lname\"\n                                                        id=\"lname\"\n                                                        placeholder=\"enter last name\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"phone\" column md={3}>\n                                                    Phone Number\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        name=\"phone\"\n                                                        id=\"phone\"\n                                                        placeholder=\"enter phone number\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <ul className=\"list-inline wizard mb-0\">\n                                                <li className=\"previous list-inline-item\">\n                                                    <Button onClick={previous} variant=\"secondary\">\n                                                        Previous\n                                                    </Button>\n                                                </li>\n                                                <li className=\"next list-inline-item float-end\">\n                                                    <Button onClick={next} variant=\"secondary\">\n                                                        Next\n                                                    </Button>\n                                                </li>\n                                            </ul>\n                                        </Form>\n                                    )}\n                                />\n                                <Step\n                                    id=\"dumbledore\"\n                                    render={({ previous }) => (\n                                        <Row>\n                                            <Col sm={12}>\n                                                <div className=\"text-center\">\n                                                    <h2 className=\"mt-0\">\n                                                        <i className=\"mdi mdi-check-all\"></i>\n                                                    </h2>\n                                                    <h3 className=\"mt-0\">Thank you !</h3>\n\n                                                    <p className=\"w-75 mb-2 mx-auto\">\n                                                        Quisque nec turpis at urna dictum luctus. Suspendisse convallis\n                                                        dignissim eros at volutpat. In egestas mattis dui. Aliquam\n                                                        mattis dictum aliquet.\n                                                    </p>\n\n                                                    <div className=\"mb-3\">\n                                                        <Form.Check type=\"checkbox\" id=\"check2\">\n                                                            <Form.Check.Input type=\"checkbox\" />{' '}\n                                                            <Form.Check.Label>\n                                                                I agree with the Terms and Conditions\n                                                            </Form.Check.Label>\n                                                        </Form.Check>\n                                                    </div>\n                                                </div>\n                                            </Col>\n\n                                            <Col sm={12}>\n                                                <ul className=\"list-inline wizard mb-0\">\n                                                    <li className=\"previous list-inline-item\">\n                                                        <Button onClick={previous} variant=\"secondary\">\n                                                            Previous\n                                                        </Button>\n                                                    </li>\n\n                                                    <li className=\"next list-inline-item float-end\">\n                                                        <Button variant=\"secondary\">Submit</Button>\n                                                    </li>\n                                                </ul>\n                                            </Col>\n                                        </Row>\n                                    )}\n                                />\n                            </Steps>\n                        </React.Fragment>\n                    )}\n                />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst WizardWithFormValidation = () => {\n    /*\n     * form validation schema\n     */\n    const validationSchema = yupResolver(\n        yup.object().shape({\n            email: yup.string().required('Please enter Email address'),\n            password: yup.string().required('Please enter Password'),\n            checkbox: yup.bool().oneOf([true]),\n        })\n    );\n    const validationSchema2 = yupResolver(\n        yup.object().shape({\n            firstname: yup.string().required('Please enter First Name'),\n            lastname: yup.string().required('Please enter Last Name'),\n            checkbox: yup.bool().oneOf([true]),\n        })\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mb-3\">Wizard with Validation</h4>\n\n                <Wizard\n                    render={({ step, steps }) => (\n                        <React.Fragment>\n                            <ProgressBar\n                                animated\n                                striped\n                                variant=\"success\"\n                                now={((steps.indexOf(step) + 1) / steps.length) * 100}\n                                className=\"mb-3 progress-sm\"\n                            />\n\n                            <Steps>\n                                <Step\n                                    id=\"login\"\n                                    render={({ next }) => (\n                                        <VerticalForm onSubmit={(event, values) => next()} resolver={validationSchema}>\n                                            <FormInput\n                                                label=\"Username/Email\"\n                                                type=\"email\"\n                                                name=\"email\"\n                                                containerClass={'mb-3'}\n                                            />\n                                            <FormInput\n                                                label=\"Password\"\n                                                type=\"password\"\n                                                name=\"password\"\n                                                containerClass={'mb-3'}\n                                            />\n\n                                            <FormInput\n                                                label=\"Remember me\"\n                                                type=\"checkbox\"\n                                                name=\"checkbox\"\n                                                containerClass={'mb-3'}\n                                            />\n\n                                            <ul className=\"list-inline wizard mb-0\">\n                                                <li className=\"previous list-inline-item\">\n                                                    <Button variant=\"secondary\" disabled>\n                                                        Previous\n                                                    </Button>\n                                                </li>\n                                                <li className=\"next list-inline-item float-end\">\n                                                    <Button variant=\"secondary\" type=\"submit\">\n                                                        Next\n                                                    </Button>\n                                                </li>\n                                            </ul>\n                                        </VerticalForm>\n                                    )}\n                                />\n                                <Step\n                                    id=\"gandalf\"\n                                    render={({ next, previous }) => (\n                                        <VerticalForm onSubmit={(event, values) => next()} resolver={validationSchema2}>\n                                            <FormInput\n                                                label=\"First Name\"\n                                                type=\"text\"\n                                                name=\"firstname\"\n                                                containerClass={'mb-3'}\n                                            />\n                                            <FormInput\n                                                label=\"Last Name\"\n                                                type=\"text\"\n                                                name=\"lastname\"\n                                                containerClass={'mb-3'}\n                                            />\n\n                                            <FormInput\n                                                label=\"Agree to terms and conditions\"\n                                                type=\"checkbox\"\n                                                name=\"checkbox\"\n                                                containerClass={'mb-3'}\n                                            />\n\n                                            <ul className=\"list-inline wizard mb-0\">\n                                                <li className=\"previous list-inline-item\">\n                                                    <Button onClick={previous} variant=\"secondary\">\n                                                        Previous\n                                                    </Button>\n                                                </li>\n                                                <li className=\"next list-inline-item float-end\">\n                                                    <Button variant=\"secondary\" type=\"submit\">\n                                                        Next\n                                                    </Button>\n                                                </li>\n                                            </ul>\n                                        </VerticalForm>\n                                    )}\n                                />\n                                <Step\n                                    id=\"dumbledore\"\n                                    render={({ previous }) => (\n                                        <Row>\n                                            <Col sm={12}>\n                                                <div className=\"text-center\">\n                                                    <h2 className=\"mt-0\">\n                                                        <i className=\"mdi mdi-check-all\"></i>\n                                                    </h2>\n                                                    <h3 className=\"mt-0\">Thank you !</h3>\n\n                                                    <p className=\"w-75 mb-2 mx-auto\">\n                                                        Quisque nec turpis at urna dictum luctus. Suspendisse convallis\n                                                        dignissim eros at volutpat. In egestas mattis dui. Aliquam\n                                                        mattis dictum aliquet.\n                                                    </p>\n\n                                                    <div className=\"mb-3\">\n                                                        <Form.Check type=\"checkbox\" id=\"check3\">\n                                                            <Form.Check.Input type=\"checkbox\" />{' '}\n                                                            <Form.Check.Label>\n                                                                I agree with the Terms and Conditions\n                                                            </Form.Check.Label>\n                                                        </Form.Check>\n                                                    </div>\n                                                </div>\n                                            </Col>\n\n                                            <Col sm={12}>\n                                                <ul className=\"list-inline wizard mb-0\">\n                                                    <li className=\"previous list-inline-item\">\n                                                        <Button onClick={previous} variant=\"secondary\">\n                                                            Previous\n                                                        </Button>\n                                                    </li>\n\n                                                    <li className=\"next list-inline-item float-end\">\n                                                        <Button variant=\"secondary\">Submit</Button>\n                                                    </li>\n                                                </ul>\n                                            </Col>\n                                        </Row>\n                                    )}\n                                />\n                            </Steps>\n                        </React.Fragment>\n                    )}\n                />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst FormWizard = () => {\n    return (\n        <React.Fragment>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Forms', path: '/ui/forms/wizard' },\n                    { label: 'Form Wizard', path: '/ui/forms/wizard', active: true },\n                ]}\n                title={'Form Wizard'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <BasicWizard />\n                </Col>\n\n                <Col xl={6}>\n                    <WizardWithProgressbar />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <WizardWithFormValidation />\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default FormWizard;\n"],"sourceRoot":""}