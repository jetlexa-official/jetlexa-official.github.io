{"version":3,"sources":["components/PageTitle/index.tsx","components/FormInput/index.tsx","pages/apps/Calendar/Calendar.tsx","pages/apps/Calendar/AddEditEvent.tsx","pages/apps/Calendar/data.tsx","assets/images/cal.png","pages/apps/Calendar/index.tsx"],"names":["PageTitle","props","className","title","listProps","Item","href","breadCrumbItems","map","item","index","active","label","path","TextualInput","type","name","placeholder","register","errors","comp","rows","refCallback","otherProps","Control","as","id","ref","r","isInvalid","Feedback","CheckInput","Check","SelectInput","Select","FormInputGroup","startIcon","textClassName","Text","FormInput","control","labelClassName","containerClass","action","Group","Label","Calendar","onDateClick","onEventClick","events","initialView","plugins","dayGridPlugin","interactionPlugin","timeGridPlugin","listPlugin","BootstrapTheme","handleWindowResize","themeSystem","buttonText","today","month","week","day","list","prev","next","headerToolbar","left","center","right","dayMaxEventRows","editable","selectable","droppable","dateClick","arg","eventClick","AddEditEvent","isOpen","onClose","isEditable","eventData","onRemoveEvent","onUpdateEvent","onAddEvent","useState","event","schemaResolver","yupResolver","yup","shape","required","methods","useForm","defaultValues","resolver","handleSubmit","formState","Modal","show","onHide","backdrop","keyboard","Header","closeButton","Title","Body","noValidate","onSubmit","data","Row","Col","sm","value","xs","Button","variant","onClick","defaultEvents","start","Date","setDate","getDate","end","IntroCard","createNewEvent","xl","lg","src","calendarImg","alt","CalendarApp","setShow","onCloseModal","setEventData","setDateInfo","onOpenModal","setIsEditable","setEvents","dateInfo","Card","String","classNames","modifiedEvents","idx","findIndex","e","splice","length","Object","keys","date","push"],"mappings":"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","file":"static/js/63.92e7bd59.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\n//TYPES\n\nimport { BreadcrumbItems, PageTitleProps } from \"@components/PageTitle/interfaces/index.interfaces\";\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps) => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <h4 className=\"page-title\">{props.title}</h4>\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Shreyu</Breadcrumb.Item>\n                            {(props.breadCrumbItems || []).map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","import { Form, InputGroup } from \"react-bootstrap\";\nimport { FormInputProps } from \"@components/FormInput/interfaces/index.interfaces\";\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Control\n                type={type}\n                placeholder={placeholder}\n                name={name}\n                as={comp}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                rows={rows}\n                {...otherProps}></Form.Control>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// extend textual form-controls with add-ons\nconst FormInputGroup = ({\n    startIcon,\n    type,\n    name,\n    placeholder,\n    comp,\n    register,\n    errors,\n    rows,\n    className,\n    textClassName,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <InputGroup>\n            <InputGroup.Text className={textClassName}>{startIcon}</InputGroup.Text>\n            {type === 'select' ? (\n                <SelectInput\n                    type={type}\n                    name={name}\n                    placeholder={placeholder}\n                    refCallback={refCallback}\n                    comp={comp}\n                    errors={errors}\n                    register={register}\n                    className={className}\n                    rows={rows}\n                    {...otherProps}\n                />\n            ) : (\n                <TextualInput\n                    type={type}\n                    name={name}\n                    placeholder={placeholder}\n                    refCallback={refCallback}\n                    comp={comp}\n                    errors={errors}\n                    register={register}\n                    className={className}\n                    rows={rows}\n                    {...otherProps}\n                />\n            )}\n        </InputGroup>\n    );\n};\n\nconst FormInput = ({\n    startIcon,\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    textClassName,\n    refCallback,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'checkbox' || type === 'radio' ? (\n                        <Form.Group className={containerClass}>\n                            <CheckInput\n                                type={type}\n                                label={label}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                rows={rows}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n                            {startIcon ? (\n                                <FormInputGroup\n                                    type={type}\n                                    startIcon={startIcon}\n                                    name={name}\n                                    comp={comp}\n                                    textClassName={textClassName}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            ) : (\n                                <SelectInput\n                                    type={type}\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    comp={comp}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            )}\n                        </Form.Group>\n                    ) : (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n                            {startIcon ? (\n                                <FormInputGroup\n                                    type={type}\n                                    startIcon={startIcon}\n                                    name={name}\n                                    comp={comp}\n                                    textClassName={textClassName}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            ) : (\n                                <TextualInput\n                                    type={type}\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    comp={comp}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            )}\n                        </Form.Group>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport listPlugin from '@fullcalendar/list';\nimport BootstrapTheme from '@fullcalendar/bootstrap';\nimport { EventInput } from '@fullcalendar/core';\n\n//TYPES\n\nimport { CalendarProps } from '@pages/apps/Calendar/interfaces/Calendar.interfaces';\n\nconst Calendar = ({ onDateClick, onEventClick, events }: CalendarProps) => {\n    /*\n     * handle calendar methods\n     */\n    const handleDateClick = (arg: any) => {\n        onDateClick(arg);\n    };\n    const handleEventClick = (arg: any) => {\n        onEventClick(arg);\n    };\n\n    return (\n        <>\n            {/* full calendar control */}\n            <div id=\"calendar\">\n                <FullCalendar\n                    initialView=\"dayGridMonth\"\n                    plugins={[dayGridPlugin, interactionPlugin, timeGridPlugin, listPlugin, BootstrapTheme]}\n                    handleWindowResize={true}\n                    themeSystem=\"bootstrap\"\n                    buttonText={{\n                        today: 'Today',\n                        month: 'Month',\n                        week: 'Week',\n                        day: 'Day',\n                        list: 'List',\n                        prev: 'Prev',\n                        next: 'Next',\n                    }}\n                    headerToolbar={{\n                        left: 'prev,next today',\n                        center: 'title',\n                        right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth',\n                    }}\n                    dayMaxEventRows={1}\n                    editable={true}\n                    selectable={true}\n                    droppable={true}\n                    events={events}\n                    dateClick={handleDateClick}\n                    eventClick={handleEventClick}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default Calendar;\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Modal, Row, Col, Button } from 'react-bootstrap';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { EventInput } from '@fullcalendar/core';\n//TYPES\nimport { AddEditEventProps } from '@pages/apps/Calendar/interfaces/AddEditEvent.interfaces';\n//COMPONENTS\nimport FormInput from '@components/FormInput';\n\n\n\nconst AddEditEvent = ({\n    isOpen,\n    onClose,\n    isEditable,\n    eventData,\n    onRemoveEvent,\n    onUpdateEvent,\n    onAddEvent,\n}: AddEditEventProps) => {\n    // event state\n    const [event] = useState<EventInput>(eventData!);\n\n    /*\n     * form validation schema\n     */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            title: yup.string().required('Please enter event name'),\n            className: yup.string().required('Please select category'),\n        })\n    );\n\n    /*\n     * form methods\n     */\n    const methods = useForm({ defaultValues: event, resolver: schemaResolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    /*\n     * handle form submission\n     */\n    const onSubmitEvent = (data: { title: string; className: string }) => {\n        isEditable ? onUpdateEvent(data) : onAddEvent(data);\n    };\n\n    return (\n        <Modal show={isOpen} onHide={onClose} backdrop=\"static\" keyboard={false}>\n            <Modal.Header className=\"pb-2 px-4 border-bottom-0\" closeButton>\n                <Modal.Title id=\"modal-title\">\n                    <h5> {isEditable ? 'Edit Event' : 'Add New Event'} </h5>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"px-4 pb-4 pt-0\">\n                <form noValidate name=\"chat-form\" id=\"chat-form\" onSubmit={handleSubmit(onSubmitEvent)}>\n                    <Row>\n                        <Col sm={12}>\n                            <FormInput\n                                type=\"text\"\n                                label=\"Event Name\"\n                                name=\"title\"\n                                className=\"form-control\"\n                                placeholder=\"Insert Event Name\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"title\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                        <Col sm={12}>\n                            <FormInput\n                                type=\"select\"\n                                label=\"Category\"\n                                name=\"className\"\n                                className=\"form-control\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"className\"\n                                errors={errors}\n                                control={control}>\n                                <option value=\"bg-danger\">Danger</option>\n                                <option value=\"bg-success\">Success</option>\n                                <option value=\"bg-primary\">Primary</option>\n                                <option value=\"bg-info\">Info</option>\n                                <option value=\"bg-dark\">Dark</option>\n                                <option value=\"bg-warning\">Warning</option>\n                            </FormInput>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col xs={4}>\n                            {isEditable ? (\n                                <Button variant=\"danger\" onClick={onRemoveEvent}>\n                                    Delete\n                                </Button>\n                            ) : null}\n                        </Col>\n                        <Col xs={8} className=\"text-end\">\n                            <Button className=\"btn btn-light me-1\" onClick={onClose}>\n                                Close\n                            </Button>\n                            <Button variant=\"success\" type=\"submit\" className=\"btn btn-success\">\n                                Save\n                            </Button>\n                        </Col>\n                    </Row>\n                </form>\n            </Modal.Body>\n        </Modal>\n    );\n};\n\nexport default AddEditEvent;\n","import { EventInput } from '@fullcalendar/core';\n\nconst defaultEvents: EventInput[] = [\n    {\n        id: '1',\n        title: 'Interview - Backend Engineer',\n        start: new Date(),\n        className: 'bg-success',\n    },\n    {\n        id: '2',\n        title: 'Phone Screen - Frontend Engineer',\n        start: new Date().setDate(new Date().getDate() + 2),\n        className: 'bg-info',\n    },\n    {\n        id: '3',\n        title: 'Meeting with John Deo',\n        start: new Date().setDate(new Date().getDate() + 2),\n        end: new Date().setDate(new Date().getDate() + 4),\n        className: 'bg-warning',\n    },\n    {\n        id: '4',\n        title: 'Buy a Theme',\n        start: new Date().setDate(new Date().getDate() + 4),\n        end: new Date().setDate(new Date().getDate() + 5),\n        className: 'bg-primary',\n    },\n];\n\nexport { defaultEvents };\n","export default __webpack_public_path__ + \"static/media/cal.80fd7ea4.png\";","import React, { useState } from 'react';\nimport { Row, Col, Card, Button } from 'react-bootstrap';\nimport '@fullcalendar/react';\nimport { DateClickArg } from '@fullcalendar/interaction';\nimport { EventClickArg, EventInput } from '@fullcalendar/core';\n\n// components\nimport PageTitle from '@components/PageTitle';\n\nimport Calendar from '@pages/apps/Calendar/Calendar';\nimport AddEditEvent from '@pages/apps/Calendar/AddEditEvent';\n\n// dummy data\nimport { defaultEvents } from '@pages/apps/Calendar/data';\n\n// images\nimport calendarImg from '@assets/images/cal.png';\n\n//TYPES\nimport { IntroCardProps } from '@pages/apps/Calendar/interfaces/index.interfaces';\n\n\nconst IntroCard = ({ createNewEvent }: IntroCardProps) => {\n    return (\n        <Row className=\"align-items-center\">\n            <Col xl={2} lg={3} xs={6}>\n                <img src={calendarImg} className=\"me-4 align-self-center img-fluid\" alt=\"\" />\n            </Col>\n            <Col xl={10} lg={9}>\n                <div className=\"mt-4 mt-lg-0\">\n                    <h5 className=\"mt-0 mb-1 fw-bold\">Welcome to Your Calendar</h5>\n                    <p className=\"text-muted mb-2\">\n                        The calendar shows the events synced from all your linked calendars. Click on event to see or\n                        edit the details. You can create new event by clicking on \"Create New event\" button or any cell\n                        available in calendar below.\n                    </p>\n                    {/* add events */}\n                    <Button variant=\"primary\" className=\"mt-2 me-1\" id=\"btn-new-event\" onClick={createNewEvent}>\n                        <i className=\"uil-plus-circle\"></i> Create New Event\n                    </Button>\n                    <Button variant=\"white\" className=\"mt-2\">\n                        <i className=\"uil-sync\"></i> Link Calendars\n                    </Button>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nconst CalendarApp = () => {\n    /*\n     * modal handeling\n     */\n    const [show, setShow] = useState<boolean>(false);\n    const onCloseModal = () => {\n        setShow(false);\n        setEventData({});\n        setDateInfo({});\n    };\n    const onOpenModal = () => setShow(true);\n    const [isEditable, setIsEditable] = useState<boolean>(false);\n\n    /*\n     * event data\n     */\n    const [events, setEvents] = useState<EventInput[]>([...defaultEvents]);\n    const [eventData, setEventData] = useState<EventInput>({});\n    const [dateInfo, setDateInfo] = useState<any>({});\n\n    /*\n    calendar events\n    */\n    // on date click\n    const onDateClick = (arg: DateClickArg) => {\n        setDateInfo(arg);\n        onOpenModal();\n        setIsEditable(false);\n    };\n\n    // on event click\n    const onEventClick = (arg: EventClickArg) => {\n        const event = {\n            id: String(arg.event.id),\n            title: arg.event.title,\n            className: arg.event.classNames[0],\n        };\n        setEventData(event);\n        onOpenModal();\n        setIsEditable(true);\n    };\n\n    /*\n    on add event \n    */\n    const onAddEvent = (data: any) => {\n        const modifiedEvents = [...events];\n        const event = {\n            id: String(modifiedEvents.length + 1),\n            title: data.title,\n            start: Object.keys(dateInfo).length !== 0 ? dateInfo.date : new Date(),\n            className: data.className,\n        };\n        modifiedEvents.push(event);\n        setEvents(modifiedEvents);\n        onCloseModal();\n    };\n\n    /*\n    on update event\n    */\n    const onUpdateEvent = (data: any) => {\n        const modifiedEvents = [...events];\n        const idx = modifiedEvents.findIndex((e: any) => e['id'] === eventData!.id);\n        modifiedEvents[idx]['title'] = data.title;\n        modifiedEvents[idx]['className'] = data.className;\n        setEvents(modifiedEvents);\n        onCloseModal();\n        setIsEditable(false);\n    };\n\n    /*\n    on remove event\n    */\n    const onRemoveEvent = () => {\n        var modifiedEvents = [...events];\n        const idx = modifiedEvents.findIndex((e: any) => e['id'] === eventData!.id);\n        modifiedEvents.splice(idx, 1);\n        setEvents(modifiedEvents);\n        onCloseModal();\n    };\n\n    // create new event\n    const createNewEvent = () => {\n        setIsEditable(false);\n        onOpenModal();\n    };\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Apps', path: '/apps/calendar' },\n                    { label: 'Calendar', path: '/apps/calendar', active: true },\n                ]}\n                title={'Calendar'}\n            />\n\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <IntroCard createNewEvent={createNewEvent} />\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            {/* fullcalendar control */}\n                            <Calendar onDateClick={onDateClick} onEventClick={onEventClick} events={events} />\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            {/* add new event modal */}\n            {show ? (\n                <AddEditEvent\n                    isOpen={show}\n                    onClose={onCloseModal}\n                    isEditable={isEditable}\n                    eventData={eventData}\n                    onUpdateEvent={onUpdateEvent}\n                    onRemoveEvent={onRemoveEvent}\n                    onAddEvent={onAddEvent}\n                />\n            ) : null}\n        </>\n    );\n};\n\nexport default CalendarApp;\n"],"sourceRoot":""}