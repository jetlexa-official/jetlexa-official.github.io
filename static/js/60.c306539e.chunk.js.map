{"version":3,"sources":["components/PageTitle/index.tsx","components/FormInput/index.tsx","components/VerticalForm/index.tsx","pages/forms/Validation.tsx"],"names":["PageTitle","props","className","title","listProps","Item","href","breadCrumbItems","map","item","index","active","label","path","TextualInput","type","name","placeholder","register","errors","comp","rows","refCallback","otherProps","Control","as","id","ref","r","isInvalid","Feedback","CheckInput","Check","SelectInput","Select","FormInputGroup","startIcon","textClassName","Text","FormInput","control","labelClassName","containerClass","action","Group","Label","VerticalForm","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","formState","noValidate","Array","isArray","child","React","createElement","key","NormalFormValidation","useState","validated","setValidated","Body","event","currentTarget","checkValidity","preventDefault","stopPropagation","controlId","required","defaultValue","hasValidation","aria-describedby","feedback","FormValidationWithTooltip","tooltip","BasicForm","schemaResolver","yupResolver","yup","shape","username","email","password","confirmpassword","oneOf","checkbox","variant","HorizontalForm","schemaResolver2","email2","password2","confirmPassword2","webSite","horizontalCheck","Row","column","md","span","offset","sm","FormValidation","Fragment","lg"],"mappings":"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","file":"static/js/60.c306539e.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\n//TYPES\n\nimport { BreadcrumbItems, PageTitleProps } from \"@components/PageTitle/interfaces/index.interfaces\";\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps) => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <h4 className=\"page-title\">{props.title}</h4>\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Shreyu</Breadcrumb.Item>\n                            {(props.breadCrumbItems || []).map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","import { Form, InputGroup } from \"react-bootstrap\";\nimport { FormInputProps } from \"@components/FormInput/interfaces/index.interfaces\";\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Control\n                type={type}\n                placeholder={placeholder}\n                name={name}\n                as={comp}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                rows={rows}\n                {...otherProps}></Form.Control>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// extend textual form-controls with add-ons\nconst FormInputGroup = ({\n    startIcon,\n    type,\n    name,\n    placeholder,\n    comp,\n    register,\n    errors,\n    rows,\n    className,\n    textClassName,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <InputGroup>\n            <InputGroup.Text className={textClassName}>{startIcon}</InputGroup.Text>\n            {type === 'select' ? (\n                <SelectInput\n                    type={type}\n                    name={name}\n                    placeholder={placeholder}\n                    refCallback={refCallback}\n                    comp={comp}\n                    errors={errors}\n                    register={register}\n                    className={className}\n                    rows={rows}\n                    {...otherProps}\n                />\n            ) : (\n                <TextualInput\n                    type={type}\n                    name={name}\n                    placeholder={placeholder}\n                    refCallback={refCallback}\n                    comp={comp}\n                    errors={errors}\n                    register={register}\n                    className={className}\n                    rows={rows}\n                    {...otherProps}\n                />\n            )}\n        </InputGroup>\n    );\n};\n\nconst FormInput = ({\n    startIcon,\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    textClassName,\n    refCallback,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'checkbox' || type === 'radio' ? (\n                        <Form.Group className={containerClass}>\n                            <CheckInput\n                                type={type}\n                                label={label}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                rows={rows}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n                            {startIcon ? (\n                                <FormInputGroup\n                                    type={type}\n                                    startIcon={startIcon}\n                                    name={name}\n                                    comp={comp}\n                                    textClassName={textClassName}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            ) : (\n                                <SelectInput\n                                    type={type}\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    comp={comp}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            )}\n                        </Form.Group>\n                    ) : (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n                            {startIcon ? (\n                                <FormInputGroup\n                                    type={type}\n                                    startIcon={startIcon}\n                                    name={name}\n                                    comp={comp}\n                                    textClassName={textClassName}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            ) : (\n                                <TextualInput\n                                    type={type}\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    comp={comp}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            )}\n                        </Form.Group>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { VerticalFromProps } from '@components/VerticalForm/interfaces/index.interfaces';\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                    return child.props && child.props.name\n                        ? React.createElement(child.type, {\n                            ...{\n                                ...child.props,\n                                register,\n                                key: child.props.name,\n                                errors,\n                                control,\n                            },\n                        })\n                        : child;\n                })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Row, Col, Card, Button, InputGroup, Form } from 'react-bootstrap';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// components\nimport PageTitle from '@components/PageTitle';\nimport FormInput from '@components/FormInput';\nimport VerticalForm from '@components/VerticalForm';\n\ninterface UserData {\n    username: string;\n    email: string;\n    password: string;\n    confirmpassword: string;\n    checkbox: boolean;\n}\n\ninterface UserData2 {\n    webSite: string;\n    email2: string;\n    password2: string;\n    confirmpassword2: string;\n    horizontalCheck: boolean;\n}\n\nconst NormalFormValidation = () => {\n    const [validated, setValidated] = useState<boolean>(false);\n\n    /*\n     * handle form submission\n     */\n    const handleSubmit = (event: any) => {\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        setValidated(true);\n    };\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Bootstrap Validation - Normal</h4>\n                    <p className=\"sub-header\">\n                        Provide valuable, actionable feedback to your users with HTML5 form validation–available in all\n                        our supported browsers.\n                    </p>\n\n                    <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                            <Form.Label>First name</Form.Label>\n                            <Form.Control required type=\"text\" placeholder=\"First name\" defaultValue=\"Mark\" />\n                            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustom02\">\n                            <Form.Label>Last name</Form.Label>\n                            <Form.Control required type=\"text\" placeholder=\"Last name\" defaultValue=\"Otto\" />\n                            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustomUsername\">\n                            <Form.Label>Username</Form.Label>\n                            <InputGroup hasValidation>\n                                <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                                <Form.Control\n                                    type=\"text\"\n                                    placeholder=\"Username\"\n                                    aria-describedby=\"inputGroupPrepend\"\n                                    required\n                                />\n                                <Form.Control.Feedback type=\"invalid\">Please choose a username.</Form.Control.Feedback>\n                            </InputGroup>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustom03\">\n                            <Form.Label>City</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"City\" required />\n                            <Form.Control.Feedback type=\"invalid\">Please provide a valid city.</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustom04\">\n                            <Form.Label>State</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"State\" required />\n                            <Form.Control.Feedback type=\"invalid\">Please provide a valid state.</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustom05\">\n                            <Form.Label>Zip</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Zip\" required />\n                            <Form.Control.Feedback type=\"invalid\">Please provide a valid zip.</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Check\n                                id=\"validation-check\"\n                                required\n                                label=\"Agree to terms and conditions\"\n                                feedback=\"You must agree before submitting.\"\n                            />\n                        </Form.Group>\n                        <Button type=\"submit\">Submit form</Button>\n                    </Form>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst FormValidationWithTooltip = () => {\n    const [validated, setValidated] = useState<boolean>(false);\n\n    /*\n     * handle form submission\n     */\n    const handleSubmit = (event: any) => {\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        setValidated(true);\n    };\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Bootstrap Validation (Tooltips)</h4>\n                    <p className=\"sub-header\">\n                        If your form layout allows it, you can swap the <code>.valid | invalid-feedback</code> classes\n                        for <code>.valid | invalid-tooltip</code> classes to display validation feedback in a styled\n                        tooltip.\n                    </p>\n                    <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip01\">\n                            <Form.Label>First name</Form.Label>\n                            <Form.Control required type=\"text\" placeholder=\"First name\" defaultValue=\"Mark\" />\n                            <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip02\">\n                            <Form.Label>Last name</Form.Label>\n                            <Form.Control required type=\"text\" placeholder=\"Last name\" defaultValue=\"Otto\" />\n                            <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationCustonTooltipme\">\n                            <Form.Label>Username</Form.Label>\n                            <InputGroup hasValidation>\n                                <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                                <Form.Control\n                                    type=\"text\"\n                                    placeholder=\"Username\"\n                                    aria-describedby=\"inputGroupPrepend\"\n                                    required\n                                />\n                                <Form.Control.Feedback type=\"invalid\" tooltip>\n                                    Please choose a username.\n                                </Form.Control.Feedback>\n                            </InputGroup>\n                        </Form.Group>\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip03\">\n                            <Form.Label>City</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"City\" required />\n                            <Form.Control.Feedback type=\"invalid\" tooltip>\n                                Please provide a valid city.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip04\">\n                            <Form.Label>State</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"State\" required />\n                            <Form.Control.Feedback type=\"invalid\" tooltip>\n                                Please provide a valid state.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip05\">\n                            <Form.Label>Zip</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Zip\" required />\n                            <Form.Control.Feedback type=\"invalid\" tooltip>\n                                Please provide a valid zip.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Button type=\"submit\">Submit form</Button>\n                    </Form>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst BasicForm = () => {\n    /*\n    form validation schema\n    */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            username: yup.string().required('Please enter Username'),\n            email: yup.string().required('Please enter Email address'),\n            password: yup.string().required('Please enter Password'),\n            confirmpassword: yup\n                .string()\n                .oneOf([yup.ref('password'), null], \"Passwords don't match\")\n                .required('This value is required.'),\n            checkbox: yup.bool().oneOf([true]),\n        })\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Basic Form</h4>\n                <p className=\"sub-header\">React validation with react-hook-form library.</p>\n                <VerticalForm<UserData>\n                    onSubmit={() => { }}\n                    resolver={schemaResolver}\n                    defaultValues={{ username: 'test' }}>\n                    <FormInput\n                        label={'Username'}\n                        type=\"text\"\n                        name=\"username\"\n                        placeholder=\"Enter your name\"\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={'Email address'}\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"Enter email\"\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={'Password'}\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Password\"\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={'Confirm Password'}\n                        type=\"password\"\n                        name=\"confirmpassword\"\n                        placeholder=\"Password\"\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput label={'Remember me'} type=\"checkbox\" name=\"checkbox\" containerClass={'mb-3'} />\n\n                    <div className=\"text-md-end mb-0\">\n                        <Button variant=\"primary\" className=\"me-1\" type=\"submit\">\n                            Submit\n                        </Button>\n                        <Button variant=\"secondary\" type=\"reset\">\n                            Cancel\n                        </Button>\n                    </div>\n                </VerticalForm>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst HorizontalForm = () => {\n    /*\n    form validation schema\n    */\n    const schemaResolver2 = yupResolver(\n        yup.object().shape({\n            email2: yup.string().required('Please enter Email address'),\n            password2: yup.string().required('Please enter Password'),\n            confirmPassword2: yup\n                .string()\n                .oneOf([yup.ref('password'), null], \"Passwords don't match\")\n                .required('This value is required.'),\n            webSite: yup.string().required('Please enter URL'),\n            horizontalCheck: yup.bool().oneOf([true]),\n        })\n    );\n\n    const methods = useForm<UserData2>({\n        defaultValues: { email2: 'shreyu@coderthemes.com' },\n        resolver: schemaResolver2,\n    });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Horizontal Form</h4>\n                <p className=\"sub-header\">React validation with react-hook-form library.</p>\n                <form name=\"chat-form\" id=\"chat-form\" onSubmit={handleSubmit(() => { })}>\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label column md={4}>\n                            Email<span className=\"text-danger\">*</span>\n                        </Form.Label>\n                        <Col md={7}>\n                            <FormInput\n                                type=\"email\"\n                                name=\"email2\"\n                                placeholder=\"Email\"\n                                register={register}\n                                key=\"email2\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label column md={4}>\n                            Password<span className=\"text-danger\">*</span>\n                        </Form.Label>\n                        <Col md={7}>\n                            <FormInput\n                                type=\"password\"\n                                name=\"password2\"\n                                placeholder=\"Password\"\n                                register={register}\n                                key=\"password2\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label column md={4}>\n                            Confirm Password<span className=\"text-danger\">*</span>\n                        </Form.Label>\n                        <Col md={7}>\n                            <FormInput\n                                type=\"password\"\n                                name=\"confirmPassword2\"\n                                placeholder=\"Password\"\n                                register={register}\n                                key=\"confirmPassword2\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label column md={4}>\n                            Web Site<span className=\"text-danger\">*</span>\n                        </Form.Label>\n                        <Col md={7}>\n                            <FormInput\n                                type=\"url\"\n                                name=\"webSite\"\n                                placeholder=\"URL\"\n                                register={register}\n                                key=\"webSite\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3\" controlId=\"horizontalCheck\">\n                        <Col md={{ span: 8, offset: 4 }}>\n                            <FormInput\n                                label={'Remember me'}\n                                type=\"checkbox\"\n                                name=\"horizontalCheck\"\n                                register={register}\n                                key=\"horizontalCheck\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Col sm={{ span: 8, offset: 4 }}>\n                            <Button variant=\"primary\" className=\"me-1\" type=\"submit\">\n                                Submit\n                            </Button>\n                            <Button variant=\"secondary\" type=\"reset\">\n                                Cancel\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst FormValidation = () => {\n    return (\n        <React.Fragment>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Forms', path: '/forms/validation' },\n                    { label: 'Validation', path: '/forms/validation', active: true },\n                ]}\n                title={'Validation'}\n            />\n\n            <Row>\n                <Col lg={6}>\n                    <NormalFormValidation />\n                </Col>\n\n                <Col lg={6}>\n                    <FormValidationWithTooltip />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <BasicForm />\n                </Col>\n                <Col lg={6}>\n                    <HorizontalForm />\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default FormValidation;\n"],"sourceRoot":""}